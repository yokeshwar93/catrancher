{"version":3,"sources":["store/reducers/catRancherSlice.ts","utils/contants.ts","utils/helper.ts","app/hooks.ts","components/CatsListComponent.tsx","components/ClowdersComponent.tsx","components/FeedbackDialogComponent.tsx","assets/loader.gif","containers/AppContainer.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["catRancherSlice","createSlice","name","initialState","catsList","selectedCats","isFetchingCatsList","clowders","1","2","3","4","clowdersFound","reducers","updateCatsList","state","action","payload","updateSelectedCats","updateClowders","updateClowdersCount","actions","selectCatsList","catRancher","selectIsFetchingCatsList","getSelectedCats","selectClowders","selectFoundClowders","stripes","color","shapes","eyes","dateFormat","weekday","year","month","day","catAttributes","failedButtonText","feedbackFailedTitle","getRandomIndex","Math","floor","random","getRandomCatAttributes","randomStripe","randomColor","randomShape","randomEyes","id","findIndex","data","useAppSelector","useSelector","useStyles","makeStyles","theme","root","flexGrow","marginTop","marginLeft","paper","height","width","cursor","borderRadius","selected","background","control","padding","spacing","gridContainerStyle","imageStyle","marginRight","display","CatsListComponent","props","classes","handleOnCatSelect","Grid","container","className","item","xs","map","value","justifyContent","slice","cat","Paper","onClick","imageUrl","catId","elevation","src","alt","border","ClowdersComponent","index","StyledDialog","withStyles","Dialog","title","fontWeight","fontSize","message","marginBottom","button","FeedbackDialogComponent","openDialog","feedback","handleClose","onClose","aria-labelledby","open","DialogTitle","titleClass","titleText","Typography","messageClass","messageText","Button","variant","isSuccess","buttonText","leftContainer","float","date","rightContainer","clowderTitle","loaderStyle","loaderText","feedbackTitleFailed","feedbackTitleSuccess","feedbackMessage","feedbackMessageSuccess","AppContainer","dispatch","useDispatch","isFetchingCats","foundClowders","useState","setOpenDialog","feedbackStatus","setFeedbackStatus","useEffect","i","push","getCatsList","setTimeout","valuesBasedOnStatus","loader","length","Date","toLocaleDateString","existingCats","filter","shape","isExistingClowder","Object","values","forEach","clowder","every","isDuplicateClowder","flag","attributeList","attributeKey","currentCat","attributeLength","validateSelectedClowder","clowdersCount","App","store","configureStore","reducer","catRancherReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.b8f1ded8.chunk.js","sourcesContent":["import {  createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\nimport {Cat, CatRancher, CatsList, Clowder} from \"../../models/modelTypes\";\n\nconst initialState: CatRancher = {\n    catsList: [],\n    selectedCats: [],\n    isFetchingCatsList: true,\n    clowders: {\n        1: [],\n        2: [],\n        3: [],\n        4: [],\n    },\n    clowdersFound: 0\n};\n\nexport const catRancherSlice = createSlice({\n    name: 'catRancher',\n    initialState,\n    reducers: {\n\n        updateCatsList: (state, action: PayloadAction<Array<CatsList>>) => {\n            state.catsList = action.payload;\n            state.isFetchingCatsList = false;\n        },\n\n        updateSelectedCats: (state, action: PayloadAction<Array<Cat>>) => {\n            state.selectedCats = action.payload;\n        },\n\n        updateClowders: (state, action: PayloadAction<Clowder>) => {\n            state.clowders = action.payload;\n        },\n\n        updateClowdersCount: (state, action: PayloadAction<number>) => {\n            state.clowdersFound = action.payload;\n        }\n\n    },\n\n\n});\n\nexport const { updateCatsList, updateSelectedCats, updateClowders, updateClowdersCount } = catRancherSlice.actions;\n\nexport const selectCatsList = (state: RootState) => state.catRancher.catsList;\nexport const selectIsFetchingCatsList = (state: RootState) => state.catRancher.isFetchingCatsList;\nexport const getSelectedCats = (state: RootState) => state.catRancher.selectedCats;\nexport const selectClowders = (state: RootState) => state.catRancher.clowders;\nexport const selectFoundClowders = (state: RootState) => state.catRancher.clowdersFound;\n\n\nexport default catRancherSlice.reducer;\n","/**\n * Common file for all the constant values\n *\n */\n\nexport const stripes : Array<string> = ['1', '2', '3'];\nexport const color : Array<string> = ['b', 'w', 't'];\nexport const shapes : Array<string> = ['t', 's', 'r'];\nexport const eyes : Array<string> = ['g', 'b', 'r'];\nexport const dateFormat : Object = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\nexport const catAttributes : Array<string> = ['stripes', 'color', 'shape', 'eyes'];\nexport const feedbackSuccessTitle : string = 'Yay !!! You have done it !!!';\nexport const feedbackFullClowderTitle : string = 'You Are Awesome !!!';\nexport const successButtonText : string = 'Keep Going';\nexport const allClowdersFoundButtonText : string = 'Start Again';\nexport const failedButtonText : string = 'Try Again';\nexport const feedbackFullClowderMessage : string = 'All the cats are happy and having a great time thanks to you :)';\nexport const feedbackSuccessMessage : string = 'These cats are going to love each other :)';\nexport const feedbackFailedTitle : string = 'Huh, That does not look right';\nexport const feedbackFailedMessage : string = 'Unless you want to be in the middle of a cat fight, you have to choose different set of cats :( ';\nexport const feedbackDuplicateMessage : string = 'The selected cats are part of an existing Clowder, so please choose a different set of cats';\n","import {Cat, CatsList, Clowder} from \"../models/modelTypes\";\nimport {catAttributes, color, dateFormat, eyes, shapes, stripes} from \"./contants\";\nimport {validClowder} from \"../tests/store/reducer/mockData\";\n\n/**\n * Returns randomised list of cat ids and their image urls\n * @returns {Array<CatsList>}\n */\nexport const getCatsList = () : Array<CatsList> => {\n    const catsList : Array<CatsList> = [];\n    for(let i = 0; i < 12 ; i++) {\n        const id = getRandomCatAttributes(catsList)\n        catsList.push({\n            id ,\n            imageUrl: `http://quantcats.herokuapp.com/static/cats/${id}.png`\n        })\n    }\n    return catsList;\n}\n\n/**\n * Returns random index for getting the cat attribute\n * @returns {number}\n */\nconst getRandomIndex = () : number => {\n    return Math.floor(Math.random() * (2 - 0 + 1)) + 0\n}\n\n/**\n * Returns formatted date value for displaying in UI\n * @returns {string}\n */\nexport const dateFormatter = () : string => {\n    return new Date().toLocaleDateString(\"en-US\", dateFormat);\n}\n\n\n/**\n * Generates random and unique set of cat attributes\n * @param catsList\n * @returns {string}\n */\nexport const getRandomCatAttributes = (catsList: Array<CatsList>) : string => {\n    const randomStripe : number = getRandomIndex();\n    const randomColor : number = getRandomIndex();\n    const randomShape : number = getRandomIndex();\n    const randomEyes : number = getRandomIndex();\n    const id = `${stripes[randomStripe]}${color[randomColor]}${shapes[randomShape]}${eyes[randomEyes]}`\n    const doesExist : number = catsList.findIndex(data => data.id === id);\n    if(doesExist !== -1) {\n        return getRandomCatAttributes(catsList)\n    }\n    return id;\n}\n\n/**\n * Validates the selected cats to see if they would get along\n * @param selectedCats\n * @returns {boolean}\n */\nexport const validateSelectedClowder = (selectedCats : Array<Cat>) : boolean => {\n    let flag = true;\n    for(let i = 0 ; i< catAttributes.length; i++) {\n        const attributeList : Array<string> = [];\n        let attributeKey = catAttributes[i] as keyof typeof validClowder[0];\n        selectedCats.forEach(cat => {\n            const currentCat : string = cat[attributeKey]\n            attributeList.push(currentCat)\n        })\n\n        const attributeLength = attributeList.filter(data => data === selectedCats[0][attributeKey]).length;\n\n        if(attributeLength === 2) {\n            flag = false;\n            break;\n        } else if (attributeLength === 1) {\n            if(attributeList[1] === attributeList[2]) {\n                flag = false;\n                break;\n            }\n        }\n    }\n\n    return flag;\n}\n\n/**\n * Checks if the selected set of cats are already available in the clowder\n * @param clowders\n * @param existingCats\n * @returns {boolean}\n */\nexport const isDuplicateClowder = (clowders : Clowder, existingCats: Array<Cat>) : boolean => {\n    let isExistingClowder = false;\n    Object.values(clowders).forEach(clowder => {\n        if(clowder.length > 0 && clowder.every(cat => existingCats.filter(data => data.id === cat.id).length > 0)) {\n            isExistingClowder = true;\n        }\n    })\n    return isExistingClowder;\n}","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from \"react\";\nimport {makeStyles} from \"@material-ui/core\";\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport {CatsList, CatsListProps} from \"../models/modelTypes\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        marginTop: '1%',\n        marginLeft: '2%'\n    },\n    paper: {\n        height: '95%',\n        width: '80%',\n        cursor: 'pointer',\n        borderRadius: '15px',\n\n    },\n    selected: {\n        background: 'lightgray'\n    },\n    control: {\n        padding: theme.spacing(2),\n    },\n    gridContainerStyle: {\n        height: '25vh',\n        width: '10vw'\n    },\n    imageStyle: {\n        height: '95%',\n        width: '95%',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n        display: 'block'\n    }\n}));\n\n\n\nconst CatsListComponent = (props : CatsListProps) => {\n    const classes = useStyles();\n    const { catsList, selectedCats, handleOnCatSelect } = props;\n\n    const isCatSelected = (catId : string) : boolean => {\n        return selectedCats.findIndex(data => data.id === catId) !== -1\n    }\n    return (\n        <Grid container className={classes.root} spacing={2}>\n            <Grid item xs={12}>\n                {[0, 4, 8].map(value => (\n                    <Grid container key={`${value}`} justifyContent=\"center\" spacing={3}>\n                        {catsList.slice(value, value +4).map((cat : CatsList) => (\n                            <Grid className={classes.gridContainerStyle} key={cat.id} item>\n                                <Paper onClick={() => handleOnCatSelect(cat.id, cat.imageUrl)} className={`${classes.paper} ${isCatSelected(cat.id) ? classes.selected : ''}`} elevation={0} >\n                                    <img className={classes.imageStyle} src={cat.imageUrl} alt={`Cat image_${cat.id}`} />\n                                </Paper>\n                            </Grid>\n                        ))}\n                    </Grid>\n                ))\n                }\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default CatsListComponent;\n","import React from 'react';\nimport {Grid, makeStyles} from \"@material-ui/core\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {clowderProps} from \"../models/modelTypes\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        marginTop: '1%'\n    },\n    paper: {\n        height: '10vh',\n        width: '5vw',\n        border: '1px solid #0593cf',\n        borderRadius: '0px'\n    },\n    imageStyle: {\n        height: '95%',\n        width: '95%',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n        display: 'block'\n    }\n\n}));\n\nconst ClowdersComponent = (props : clowderProps) => {\n    const classes = useStyles();\n    const { clowders } = props;\n\n    return (\n\n        <Grid container className={classes.root} spacing={2}>\n            <Grid item xs={12}>\n                {[1, 2, 3, 4].map((index : any) => (\n                    <Grid container  key={index} justifyContent=\"center\" spacing={0}>\n                        {[0, 1, 2].map((value) => (\n                            <Grid key={value} item>\n                                <Paper className={classes.paper} elevation={0} >\n                                    {clowders[index][value] &&\n                                        <img className={classes.imageStyle}\n                                             src={clowders[index][value].imageUrl}\n                                             alt={`Cat image_${clowders[index][value].id}`}/>\n                                    }\n                                </Paper>\n                            </Grid>\n                        ))}\n                    </Grid>\n                ))}\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default ClowdersComponent;","import React from \"react\";\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport {Button, makeStyles, Typography, withStyles} from \"@material-ui/core\";\nimport {DialogProps} from \"../models/modelTypes\";\n\nconst StyledDialog = withStyles({\n    paper: {\n        width: '50vw'\n    }\n})(Dialog);\n\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    title: {\n        fontWeight: 'bold',\n        fontSize: '2em'\n    },\n    message: {\n        marginLeft: '4%',\n        marginBottom: '5%'\n    },\n\n    container: {\n        width: '20vw',\n    },\n    button: {\n        borderRadius: '0px'\n    },\n\n}));\n\nconst FeedbackDialogComponent = (props : DialogProps) => {\n\n    const classes = useStyles();\n\n    const { openDialog, feedback, handleClose } = props;\n\n    return (\n        <StyledDialog onClose={handleClose} aria-labelledby=\"simple-dialog-title\" open={openDialog}>\n            <DialogTitle className={`${classes.title} ${feedback.titleClass}`}>{feedback.titleText}</DialogTitle>\n            <Typography className={`${classes.message} ${feedback.messageClass}`}>{feedback.messageText}</Typography>\n            <Button onClick={handleClose} className={classes.button} variant={'contained'} color={feedback.isSuccess ? 'primary' : 'secondary'}>{feedback.buttonText}</Button>\n        </StyledDialog>\n    )\n}\n\nexport default FeedbackDialogComponent;\n\n\n","export default __webpack_public_path__ + \"static/media/loader.4874400f.gif\";","import React, {useEffect, useState} from 'react';\nimport {makeStyles, Typography} from \"@material-ui/core\";\nimport {\n    getSelectedCats,\n    selectCatsList, selectClowders, selectFoundClowders,\n    selectIsFetchingCatsList\n} from \"../store/reducers/catRancherSlice\";\nimport {dateFormatter, getCatsList, validateSelectedClowder, isDuplicateClowder} from \"../utils/helper\";\nimport {useAppDispatch, useAppSelector} from \"../app/hooks\";\nimport { updateCatsList, updateSelectedCats, updateClowders, updateClowdersCount } from '../store/reducers/catRancherSlice';\nimport CatsListComponent from \"../components/CatsListComponent\";\nimport ClowdersComponent from \"../components/ClowdersComponent\";\nimport FeedbackDialogComponent from \"../components/FeedbackDialogComponent\";\nimport loader from '../assets/loader.gif';\n\nimport {\n    allClowdersFoundButtonText, failedButtonText,\n    feedbackDuplicateMessage,\n    feedbackFailedMessage,\n    feedbackFailedTitle, feedbackFullClowderMessage,\n    feedbackFullClowderTitle,\n    feedbackSuccessMessage,\n    feedbackSuccessTitle, successButtonText\n} from \"../utils/contants\";\nimport {Cat, CatsList, Clowder, values} from \"../models/modelTypes\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    leftContainer: {\n        width: '50vw',\n        float: 'left',\n        marginTop: '3%',\n\n    },\n    title: {\n        fontSize: '4em',\n        fontWeight: 'bold'\n    },\n    date: {\n        color: 'grey'\n    },\n    rightContainer: {\n        float: 'right',\n        width: '45vw',\n        marginTop: '15%',\n        marginRight: '4%'\n    },\n    clowderTitle: {\n        fontWeight: 'lighter'\n    },\n    loaderStyle: {\n        width: '10vw',\n        marginTop: '16%'\n    },\n    loaderText: {\n        fontWeight: 'bold',\n        fontSize: '2em'\n    },\n    feedbackTitleFailed: {\n        color: 'red'\n    },\n    feedbackTitleSuccess: {\n        color: 'green'\n    },\n    feedbackMessage: {\n        marginLeft: '4%',\n        marginBottom: '5%'\n    },\n    feedbackMessageSuccess: {\n        marginLeft: '5%'\n    },\n\n}));\n\n\nconst AppContainer = () => {\n\n    const dispatch = useAppDispatch();\n    const classes = useStyles();\n    const catsList : Array<CatsList> = useAppSelector(selectCatsList);\n    const selectedCats : Array<Cat> = useAppSelector(getSelectedCats);\n    const isFetchingCats : boolean = useAppSelector(selectIsFetchingCatsList);\n    const clowders : Clowder = useAppSelector(selectClowders);\n    const foundClowders: number = useAppSelector(selectFoundClowders);\n\n    const [openDialog, setOpenDialog] = useState(false);\n    const [feedbackStatus, setFeedbackStatus] = useState('')\n    useEffect(() => {\n        const catsList : Array<CatsList> = getCatsList();\n\n        //Adding timeout to simulate showing of loader\n        setTimeout(() => dispatch(updateCatsList(catsList)), 2000);\n    },[])\n\n\n    /**\n     * Handler for selecting cats and validate to see if they form a valid clowder\n     * @param catId\n     * @param imageUrl\n     * @returns {void}\n     */\n    const handleOnCatSelect = (catId : string, imageUrl : string) : void => {\n        let existingCats : Array<Cat> = [...selectedCats];\n        const existingIndex : number = existingCats.findIndex(data => data.id === catId);\n        if(existingIndex !== -1) {\n            existingCats = selectedCats.filter(cat => cat.id !== catId);\n            dispatch(updateSelectedCats(existingCats));\n        }\n        else {\n            existingCats.push({\n                id: catId,\n                stripes: catId[0],\n                color: catId[1],\n                shape: catId[2],\n                eyes: catId[3],\n                imageUrl: imageUrl\n            })\n            dispatch(updateSelectedCats(existingCats));\n        }\n        if(existingCats.length === 3) {\n            const isExistingClowder : boolean = isDuplicateClowder(clowders, existingCats)\n            if(isExistingClowder) {\n                setFeedbackStatus('duplicateClowder')\n            } else {\n                const isValidClowder : boolean = validateSelectedClowder(existingCats)\n                if(isValidClowder) {\n                    const clowdersCount = foundClowders + 1;\n                    dispatch(updateClowdersCount(foundClowders + 1))\n                    dispatch(updateClowders({\n                        ...clowders,\n                        [clowdersCount]: existingCats\n                    }))\n                    if(clowdersCount === 4) {\n                        setFeedbackStatus('fullClowder')\n                    } else {\n                        setFeedbackStatus('success')\n                    }\n                } else {\n                    setFeedbackStatus('failed')\n                }\n            }\n            setOpenDialog(true);\n        }\n\n    }\n\n    /**\n     * Handler for closing the feedback modal\n     * @returns {void}\n     */\n    const onCloseDialogHandler = () : void => {\n        setOpenDialog(false);\n        dispatch(updateSelectedCats([]));\n        if(foundClowders === 4) {\n            dispatch(updateClowders({\n                1: [],\n                2: [],\n                3: [],\n                4: [],\n            }));\n            dispatch(updateClowdersCount(0));\n        }\n    }\n\n    /**\n     * Helper function for getting the values based on feedback status\n     * @retuns {values}\n     */\n    const getValuesBasedOnStatus = () : values => {\n        if(feedbackStatus === 'success') {\n            return {\n                titleClass: classes.feedbackTitleSuccess,\n                messageClass: classes.feedbackMessageSuccess,\n                titleText: feedbackSuccessTitle,\n                messageText: feedbackSuccessMessage,\n                isSuccess: true,\n                buttonText: successButtonText\n            }\n        }\n        else if (feedbackStatus === 'failed') {\n            return {\n                titleClass: classes.feedbackTitleFailed,\n                messageClass: '',\n                titleText: feedbackFailedTitle,\n                messageText: feedbackFailedMessage,\n                isSuccess: false,\n                buttonText: failedButtonText\n            }\n        } else if (feedbackStatus === 'duplicateClowder') {\n            return {\n                titleClass: classes.feedbackTitleFailed,\n                messageClass: '',\n                titleText: feedbackFailedTitle,\n                messageText: feedbackDuplicateMessage,\n                isSuccess: false,\n                buttonText: failedButtonText\n            }\n        } else if (feedbackStatus === 'fullClowder') {\n            return {\n                titleClass: classes.feedbackTitleSuccess,\n                messageClass: '',\n                titleText: feedbackFullClowderTitle,\n                messageText: feedbackFullClowderMessage,\n                isSuccess: true,\n                buttonText: allClowdersFoundButtonText\n            }\n        }\n        return {\n            titleClass: '',\n            messageClass: '',\n            titleText: '',\n            messageText: '',\n            isSuccess: false,\n            buttonText: ''\n        }\n    }\n\n    const valuesBasedOnStatus = getValuesBasedOnStatus();\n\n    return (\n        <div>\n            {isFetchingCats && <div>\n                <img src={loader} alt={'loader'} className={classes.loaderStyle}/>\n                <Typography className={classes.loaderText}>Hang tight! Your cats are on their way :)</Typography>\n            </div>}\n\n            { !isFetchingCats && catsList.length > 0 &&\n            <>\n            <div className={classes.leftContainer}>\n                <Typography className={classes.title}>Catrancher</Typography>\n                <Typography className={classes.date}>{dateFormatter()}</Typography>\n                <CatsListComponent handleOnCatSelect={handleOnCatSelect} selectedCats={selectedCats} catsList={catsList} />\n\n            </div>\n            <div className={classes.rightContainer}>\n                <Typography className={classes.clowderTitle}>Clowders Found</Typography>\n                <ClowdersComponent clowders={clowders} />\n            </div>\n            <FeedbackDialogComponent handleClose={onCloseDialogHandler} openDialog={openDialog} feedback={valuesBasedOnStatus} />\n            </>}\n        </div>\n    )\n}\n\nexport default AppContainer;","import React from 'react';\nimport './App.css';\nimport AppContainer from \"./containers/AppContainer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppContainer />\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport catRancherReducer from '../store/reducers/catRancherSlice';\n\nexport const store = configureStore({\n  reducer: {\n    catRancher: catRancherReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}